Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.*;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n    public static void main( String[] args ) throws Exception {\r\n        try (ServerSocket serverSocket = new ServerSocket(8080)) {\r\n            while (true) {\r\n                try (Socket client = serverSocket.accept()) {\r\n                    handleClient(client);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static void handleClient(Socket client) throws IOException {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(client.getInputStream()));\r\n\r\n        StringBuilder requestBuilder = new StringBuilder();\r\n        String line;\r\n        while (!(line = br.readLine()).isBlank()) {\r\n            requestBuilder.append(line + \"\\r\\n\");\r\n        }\r\n\r\n        String request = requestBuilder.toString();\r\n        String[] requestsLines = request.split(\"\\r\\n\");\r\n        String[] requestLine = requestsLines[0].split(\" \");\r\n        String method = requestLine[0];\r\n        String path = requestLine[1];\r\n        String version = requestLine[2];\r\n        String host = requestsLines[1].split(\" \")[1];\r\n\r\n        List<String> headers = new ArrayList<>();\r\n        for (int h = 2; h < requestsLines.length; h++) {\r\n            String header = requestsLines[h];\r\n            headers.add(header);\r\n        }\r\n\r\n        String accessLog = String.format(\"Client %s, method %s, path %s, version %s, host %s, headers %s\",\r\n                client.toString(), method, path, version, host, headers.toString());\r\n        System.out.println(accessLog);\r\n\r\n\r\n        Path filePath = getFilePath(path);\r\n        if (Files.exists(filePath)) {\r\n            // file exist\r\n            String contentType = guessContentType(filePath);\r\n            sendResponse(client, \"200 OK\", contentType, Files.readAllBytes(filePath));\r\n        } else {\r\n            // 404\r\n            byte[] notFoundContent = \"<h1>Not found :(</h1>\".getBytes();\r\n            sendResponse(client, \"404 Not Found\", \"text/html\", notFoundContent);\r\n        }\r\n\r\n    }\r\n\r\n    private static void sendResponse(Socket client, String status, String contentType, byte[] content) throws IOException {\r\n        OutputStream clientOutput = client.getOutputStream();\r\n        clientOutput.write((\"HTTP/1.1 \\r\\n\" + status).getBytes());\r\n        clientOutput.write((\"ContentType: \" + contentType + \"\\r\\n\").getBytes());\r\n        clientOutput.write(\"\\r\\n\".getBytes());\r\n        clientOutput.write(content);\r\n        clientOutput.write(\"\\r\\n\\r\\n\".getBytes());\r\n        clientOutput.flush();\r\n        client.close();\r\n    }\r\n\r\n    private static Path getFilePath(String path) {\r\n        if (\"/\".equals(path)) {\r\n            path = \"/index.html\";\r\n        }\r\n\r\n        return Paths.get(\"/tmp/www\", path);\r\n    }\r\n\r\n    private static String guessContentType(Path filePath) throws IOException {\r\n        return Files.probeContentType(filePath);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision ab6d3b28b987a6f113c36812c7451d770e8a1ba0)
+++ b/src/main/java/Main.java	(date 1697716470969)
@@ -1,4 +1,5 @@
 import java.io.*;
+import java.lang.reflect.Field;
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.nio.file.Files;
@@ -9,13 +10,22 @@
 
 public class Main {
     public static void main( String[] args ) throws Exception {
-        try (ServerSocket serverSocket = new ServerSocket(8080)) {
-            while (true) {
-                try (Socket client = serverSocket.accept()) {
-                    handleClient(client);
-                }
-            }
+        Class<TestKlas> tk = TestKlas.class;
+        Field field = tk.getDeclaredField("name");
+
+        if(field.isAnnotationPresent(Nullable.class)) {
+            Nullable myNull = field.getAnnotation(Nullable.class);
+            System.out.println("Value: " + myNull.value());
+        } else {
+            System.out.println("Nema anotacije na polju!");
         }
+//        try (ServerSocket serverSocket = new ServerSocket(8081  )) {
+//            while (true) {
+//                try (Socket client = serverSocket.accept()) {
+//                    handleClient(client);
+//                }
+//            }
+//        }
     }
 
     private static void handleClient(Socket client) throws IOException {
Index: src/main/java/Nullable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Nullable.java b/src/main/java/Nullable.java
new file mode 100644
--- /dev/null	(date 1697708192115)
+++ b/src/main/java/Nullable.java	(date 1697708192115)
@@ -0,0 +1,7 @@
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+@Retention(RetentionPolicy.RUNTIME)
+public @interface Nullable {
+    String value() default "Petar";
+}
Index: src/main/java/TestKlas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/TestKlas.java b/src/main/java/TestKlas.java
new file mode 100644
--- /dev/null	(date 1697708368597)
+++ b/src/main/java/TestKlas.java	(date 1697708368597)
@@ -0,0 +1,4 @@
+public class TestKlas {
+    @Nullable("Ovo je neki tekst")
+    private String name;
+}
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_19\" default=\"true\" project-jdk-name=\"openjdk-19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision ab6d3b28b987a6f113c36812c7451d770e8a1ba0)
+++ b/.idea/misc.xml	(date 1697699376449)
@@ -1,7 +1,14 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_19" default="true" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="openjdk-19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a5281412-b623-4d1d-80f0-0256ec10c029\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"importingSettings\">\r\n      <MavenImportingSettings>\r\n        <option name=\"workspaceImportEnabled\" value=\"true\" />\r\n      </MavenImportingSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2WkVq2L8be3tmzwjTFRcX4Ak2iR\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a5281412-b623-4d1d-80f0-0256ec10c029\" name=\"Changes\" comment=\"\" />\r\n      <created>1697276773642</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1697276773642</updated>\r\n      <workItem from=\"1697276773874\" duration=\"8000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision ab6d3b28b987a6f113c36812c7451d770e8a1ba0)
+++ b/.idea/workspace.xml	(date 1698217020801)
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
     <list default="true" id="a5281412-b623-4d1d-80f0-0256ec10c029" name="Changes" comment="" />
     <option name="SHOW_DIALOG" value="false" />
@@ -7,11 +10,25 @@
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="AnnotationType" />
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
   <component name="MavenImportPreferences">
-    <option name="importingSettings">
-      <MavenImportingSettings>
-        <option name="workspaceImportEnabled" value="true" />
-      </MavenImportingSettings>
+    <option name="generalSettings">
+      <MavenGeneralSettings>
+        <option name="useMavenConfig" value="true" />
+      </MavenGeneralSettings>
     </option>
   </component>
   <component name="ProjectId" id="2WkVq2L8be3tmzwjTFRcX4Ak2iR" />
@@ -24,7 +41,15 @@
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false"
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "last_opened_file_path": "C:/CS202-Domaci/Domaci2",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "settings.editor.selected.configurable": "preferences.pluginManager",
+    "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
@@ -36,7 +61,13 @@
       <option name="presentableId" value="Default" />
       <updated>1697276773642</updated>
       <workItem from="1697276773874" duration="8000" />
+      <workItem from="1697699291047" duration="3620000" />
+      <workItem from="1697716227835" duration="1360000" />
+      <workItem from="1698216905500" duration="112000" />
     </task>
     <servers />
   </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
 </project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1697699376628)
+++ b/.idea/encodings.xml	(date 1697699376628)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
